package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.demo.util.JwtFilter;

import jakarta.servlet.http.HttpServletResponse;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {
	
    private final JwtFilter jwtFilter;

    public SecurityConfig(JwtFilter jwtFilter) {
        this.jwtFilter = jwtFilter;
    }
	 @Bean
	 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        http.authorizeHttpRequests(auth -> auth
	                .requestMatchers("/login", "/user/buses","/user/hotels","/user/trains").permitAll()
	                .requestMatchers("/admin/**").hasRole("ADMIN") // Admin-specific endpoints
	                .requestMatchers("/user/**").hasRole("USER") // User-specific endpoints
	                .anyRequest().authenticated()
	            )
	            .exceptionHandling(exception -> exception
	                    .accessDeniedHandler((request, response, accessDeniedException) -> {
	                        response.setContentType("application/json");
	                        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
	                        response.getWriter().write("{\"message\":\"unauthorized access\"}");
	                    })
	                )
	            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
	            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

	        return http.build();
	    }
	    @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
}
